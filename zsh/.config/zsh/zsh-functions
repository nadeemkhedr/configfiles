#!/bin/sh

# Listing of processing listening on some port
listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

clone() {
  cd ~/work/repos
  url=$(osascript -e 'tell application "Brave" to return URL of active tab of front window')
  repo=${url:19}
  name=${repo:t}
  git clone git@github.com:$repo && nvim $name
}

new_react() {
  cd ~/work
  projectName=$1
  echo $projectName
  npx create-react-app $projectName
  nvim $projectName
}


function nvims() {
  items=("default" "kickstart" "LazyVim")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}


function obsidian_note() {
  if [ -z "$1" ]; then
    echo "Please provide a file name"
    return 1
  fi
  fileName=$1
  today=$(date +"%Y-%m-%d")

  # want to touch a new file with today's date and the argument the user added
  # and then create the file in ~/Library/Mobile\ Documents/iCloud~md~obsidian/Documents/Mind/inbox and open it in nvim
  filePath=~/Library/Mobile\ Documents/iCloud~md~obsidian/Documents/Mind/01\ -\ Inbox/$today-$fileName.md
  touch $filePath
  nvim $filePath
}
alias on=obsidian_note

# open in quick look (preview) on macos
function preview() {
  if [ -z "$1" ]; then
    echo "Please provide a file name"
    return 1
  fi

  qlmanage -p $1 >/dev/null 2>/dev/null &
}
alias p=preview


# open yazi and cd into dir when closed
function yazi_cd() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}
alias yy=yazi_cd



# list windows in aerospace and switch on enter
function ff() {
  aerospace list-windows --all | fzf --bind 'enter:execute(bash -c "aerospace focus --window-id {1}")+abort'
}


# tmux plugin sesh
# https://github.com/joshmedeski/sesh
function sesh-sessions() {
  {
    exec </dev/tty
    exec <&1
    local session
    session=$(sesh list -t -c | fzf --height 40% --reverse --border-label ' sesh ' --border --prompt '⚡  ')
    zle reset-prompt > /dev/null 2>&1 || true
    [[ -z "$session" ]] && return
    sesh connect $session
  }
}

function sesh-open() {
  sesh connect "$(
    sesh list --icons --hide-duplicates | fzf --no-border \
      --ansi \
      --list-border \
      --no-sort --prompt '⚡  ' \
      --color 'list-border:6,input-border:3,preview-border:4,header-bg:-1,header-border:6' \
      --input-border \
      --header-border \
      --bind 'tab:down,btab:up' \
      --bind 'ctrl-a:change-prompt(⚡  )+reload(sesh list --icons)' \
      --bind 'ctrl-t:change-prompt(🪟  )+reload(sesh list -t --icons)' \
      --bind 'ctrl-g:change-prompt(⚙️  )+reload(sesh list -c --icons)' \
      --bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -z --icons)' \
      --bind 'ctrl-f:change-prompt(🔎  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
      --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(⚡  )+reload(sesh list --icons)' \
      --preview-window 'right:70%' \
      --preview 'sesh preview {}' \
  )"
}
alias tt=sesh-open
